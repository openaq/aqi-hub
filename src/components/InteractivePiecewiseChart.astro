<script>
  import { getContrast } from "../utils/colors";
  import countriesMap from "../data/countries.json";
  import * as Plot from "@observablehq/plot";
  import type { CountryMapDefinition, IndexDefinition } from "../types/types";

  const countryMap = countriesMap as CountryMapDefinition;

  const baseURL = "http://localhost:4321";
  const data = await fetch(new URL(`api/data/indices.json`, baseURL));
  const breakpoints = await data.json();

  const concentration = 42;

  const piecewise = (
    x: number,
    iU: number,
    iL: number,
    cU: number,
    cL: number
  ) => Math.round(((iU - iL) / (cU - cL)) * (x - cL) + iL);

  let pm2524hr = breakpoints.filter(
    (o: IndexDefinition) => o.pollutant == "PM2.5" && o.averagingPeriod == "24"
  );
  pm2524hr = pm2524hr.map((o: IndexDefinition) => {
    o.concentrationUpper ? o.concentrationUpper : (o.concentrationUpper = 500);
    return o;
  });
  pm2524hr = pm2524hr.filter(
    (o) => ["PE", "MX", "GB", "IL", "EU"].indexOf(o.iso) < 0
  ); // Peru, UK and Mexico have a 24 hr average but do not use the piecewise

  function filterData(data, value) {
    function findBestMatch(objects, value) {
      let matches = objects.filter((obj) => {
        return (
          value >= obj.concentrationLower &&
          (obj.concentrationUpper === null || value <= obj.concentrationUpper)
        );
      });

      if (matches.length > 0) {
        return matches[0];
      }

      return objects.reduce((max, obj) => {
        if (obj.concentration_upper === null) {
          return obj;
        }
        return !max.concentration_upper ||
          obj.concentrationUpper > max.concentrationUpper
          ? obj
          : max;
      });
    }

    let groupedData = data.reduce((acc, obj) => {
      if (!acc[obj.iso]) {
        acc[obj.iso] = [];
      }
      acc[obj.iso].push(obj);
      return acc;
    }, {});

    let results = [];

    for (let iso in groupedData) {
      if (groupedData.hasOwnProperty(iso)) {
        let bestMatch = findBestMatch(groupedData[iso], value);
        if (bestMatch) {
          results.push(bestMatch);
        }
      }
    }

    return results;
  }

  const d = filterData(pm2524hr, concentration);
  const b = d.map((o) => {
    o.value =
      o["concentrationUpper"] && o["categoryUpper"]
        ? piecewise(
            concentration,
            o["categoryUpper"],
            o["categoryLower"],
            o["concentrationUpper"],
            o["concentrationLower"]
          )
        : o["categoryLower"];
    o.name = countryMap[o.iso];
    return o;
  });

  const plot = Plot.plot({
    height: 350,
    width: 700,
    marginLeft: 150,
    y: { label: "Country/territory", tickPadding: 12, tickSize: 0 },
    x: { label: "Index value", domain: [0, 500] },
    marks: [
      Plot.ruleY(b, { y: "name", x: "value", stroke: "black", strokeWidth: 6 }),
      Plot.dot(b, { y: "name", x: "value", fill: "black", r: 12 }),
      Plot.ruleY(b, { y: "name", x: "value", stroke: "hex", strokeWidth: 4 }),
      Plot.dot(b, { y: "name", x: "value", fill: "hex", r: 11 }),
      Plot.text(b, {
        y: "name",
        x: "value",
        fill: (d) => getContrast(d.hex),
        text: "value",
      }),
    ],
  });

  document.getElementById("plotChart")?.appendChild(plot);
</script>

<div>
  <h2>PM2.5 Plot</h2>
  <div id="plotChart"></div>
</div>
