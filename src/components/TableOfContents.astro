---
const { contentSelector } = Astro.props;
---

<style lang="scss" is:global>
  li {
    cursor: pointer;
  }
  .toc {
    position: fixed;
    top: 80px;
    right: 0;
    overflow-y: auto;
    width: 12rem;
    height: 100vh;
    z-index: 10;
    border-left: 1px solid #d4d8dc;

    @media (max-width: 900px) {
      display: none;
    }

    &__list {
      list-style: none;
      padding-left: 10px;

      .toc-anchor-item {
        box-sizing: border-box;
        padding: 8px 16px;

        &--active {
          border-left: 2px solid #66b3ff;
          color: #1d64ab;
        }
        &:active {
          border-left: 2px solid #66b3ff;
          color: #1d64ab;
        }
      }
    }
  }
</style>

<aside class="toc">
  <ul class="toc__list"></ul>
</aside>

<script define:vars={{ contentSelector }}>
  const elementIsInViewport = (elem) => {
    var rect = elem.getBoundingClientRect();
    return (
      rect.top >= 0 && rect.top <= window.innerHeight * 0.3 && rect.bottom >= 0
    );
  };

  function checkAnchorInViewport(anchorLinks) {
    anchorLinks.forEach((elem) => {
      if (elementIsInViewport(elem)) {
        const existingElems = document.querySelectorAll(
          ".toc-anchor-item--active"
        );
        for (const el of existingElems) {
          el.classList.remove("toc-anchor-item--active");
        }
        const li = document.querySelector(
          `[data-href-value="${elem.getAttribute("href")}"]`
        );
        li.classList.add("toc-anchor-item--active");
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const content = document.querySelector(contentSelector);
    const anchorLinks = content.querySelectorAll(".anchor-link");
    const tocList = document.querySelector(".toc > .toc__list");
    for (const anchorLink of anchorLinks) {
      const tag = anchorLink.parentElement?.tagName;
      if (tag !== "H1" && tag !== "H2") continue;

      const li = document.createElement("li");
      li.classList.add("toc-anchor-item");
      li.setAttribute("data-href-value", anchorLink.getAttribute("href"));
      li.innerText = anchorLink.innerText;
      li.addEventListener("click", () => {
        anchorLink.scrollIntoView({ behavior: "smooth" });
        setTimeout(() => {
          document
            .querySelectorAll(".toc-anchor-item--active")
            .forEach((el) => {
              el.classList.remove("toc-anchor-item--active");
            });
          li.classList.add("toc-anchor-item--active");
        }, 800);
      });
      tocList.appendChild(li);
    }
    checkAnchorInViewport(anchorLinks);

    document.addEventListener("scroll", () => {
      checkAnchorInViewport(anchorLinks);
    });
  });
</script>
