---
import type {
  IndexDefinition,
  TableRowsDefinition,
  CategoryDefinition,
} from "src/types/types";
import {
  tableReshape,
  normalizePollutantLabel,
  normalizeUnitsLabel,
  reshapeTableData,
} from "../utils/utils";

const { index, rangeValue, labelValue } = Astro.props;
const res = await fetch(new URL(`/api/data/${index}.json`, Astro.url));
const breakpoints = await res.json();

let label = true;
let range = true;

if (typeof labelValue !== "undefined") {
  label = labelValue;
}
if (typeof rangeValue !== "undefined") {
  range = rangeValue;
}

const seen = new Set();
const headerColumns = breakpoints
  .map((i: IndexDefinition) => {
    const categoryText = label ? i.category : "";
    const rangeText = i.categoryUpper
      ? `-${i.categoryUpper}`
      : range
        ? "+"
        : "";
    return {
      categoryText,
      categoryLower: i.categoryLower,

      rangeText,
    };
  })
  .filter((item: object) => {
    const key = JSON.stringify(item);
    if (seen.has(key)) return false;
    seen.add(key);
    return true;
  });

const reshapedData = reshapeTableData(breakpoints);

const finalTableRows: TableRowsDefinition = tableReshape(reshapedData);
---

<style lang="scss">
  .breakpoints-table {
    width: 100%;

    th,
    td {
      padding: 0.1rem;
      font-size: 0.5rem;
    }

    @media (min-width: 600px) {
      th,
      td {
        padding: 0.2rem;
        font-size: 0.65rem;
      }
    }

    @media (min-width: 1100px) {
      th,
      td {
        padding: 0.6rem;
        font-size: 0.9rem;
      }
    }

    @media (min-width: 1300px) {
      th,
      td {
        padding: 0.6rem;
        font-size: 1rem;
      }
    }
  }
</style>

<table class="breakpoints-table">
  <thead>
    <tr>
      <th>Pollutant</th>
      <th>Averaging period</th>
      {
        headerColumns.map((col: CategoryDefinition) => (
          <th>
            {col.categoryText}
            <br />
            {`${col.categoryLower}${col.rangeText}`}
          </th>
        ))
      }
    </tr>
  </thead>
  <tbody>
    {
      Object.entries(finalTableRows).map(([key, values]) => {
        const [pollutant, avgPeriod] = key.split("-");
        const [measurand, units] = pollutant.split(" ");
        const unitsLabel = normalizeUnitsLabel(units);
        return (
          <tr>
            <td>
              <Fragment set:html={normalizePollutantLabel(measurand)} />{" "}
              {unitsLabel}
            </td>
            <td>{avgPeriod} hr.</td>
            {headerColumns.map((header: CategoryDefinition) => {
              const match = values.find(
                (v: IndexDefinition) => v.categoryLower === header.categoryLower
              );

              return (
                <td>
                  {typeof match?.concentrationLower !== "undefined"
                    ? match.concentrationLower === 0 &&
                      match.concentrationUpper === 0
                      ? "-"
                      : `${match.concentrationLower}${match.concentrationUpper ? `-${match.concentrationUpper}` : "+"} ${unitsLabel}`
                    : "-"}
                </td>
              );
            })}
          </tr>
        );
      })
    }
  </tbody>
</table>
